using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using TShockAPI;

namespace Plugin
{
    internal class Configuration
    {
        [JsonProperty("装备饰品检测", Order = -14)]
        public bool Enable2 { get; set; } = true;

        [JsonProperty("背包持有检测", Order = -13)]
        public bool Enable { get; set; } = true;

        [JsonProperty("背包存物速度", Order = -12)]
        public float ItemTime { get; set; } = 120f;
        [JsonProperty("背包存钱速度", Order = -11)]
        public float CoinTime { get; set; } = 20f;

        [JsonProperty("使用说明1", Order = -10)]
        public static string Text { get; set; } = "[是否手持] 需要选中 [持有物品] 其中1个才会启动存储功能，关闭则背包含有 其中1个就会启动";

        [JsonProperty("使用说明2", Order = -10)]
        public static string Text2 { get; set; } = "[存物速度] 不要低于60帧(推荐120)，否则手动 [连续] 快速放入 [同样物品到存储空间格子] 会导致物品数量翻倍";

        [JsonProperty("使用说明3", Order = -10)]
        public static string Text3 { get; set; } = "[物品名] 会在使用 [/Reload] 指令时根据 [物品ID] 自动写入，[物品数量] 为储存最低数量要求 ";

        [JsonProperty("使用说明4", Order = -10)]
        public static string Text4 { get; set; } = "[装备饰品] 只会检测装备3格+饰品7格，与[存物速度]等无关，装备指定饰品(盔甲)玩家只要移动或攻击就会触发自存 ";

        [JsonProperty("使用说明5", Order = -10)]
        public static string Text5 { get; set; } = "[存在BUG] 收藏的物品会被取消收藏(指虚空袋的药水堆叠进箱子的风险) ";

        [JsonProperty("存钱罐", Order = -9)]
        public bool bank1 { get; set; } = true;
        [JsonProperty("保险箱", Order = -8)]
        public bool bank2 { get; set; } = true;
        [JsonProperty("护卫熔炉", Order = -6)]
        public bool bank3 { get; set; } = true;
        [JsonProperty("虚空袋", Order = -7)]
        public bool bank4 { get; set; } = true;

        [JsonProperty("存物提示", Order = -4)]
        public bool Mess { get; set; } = true;

        [JsonProperty("是否手持(↓)", Order = -1)]
        public bool Hand { get; set; } = false;

        [JsonProperty("背包持有", Order = 1)]
        public int[] HoldItems { get; set; } = new int[] { 87, 346, 3213, 3813, 4076, 4131, 5325 };

        [JsonProperty("装备饰品", Order = 2)]
        public int[] ArmorItem { get; set; } = new int[] { 88, 410, 411, 489, 490, 491, 855, 935, 1301, 2220, 2998, 3034, 3035, 3061, 3068, 4008, 4056, 4989, 5107, 5126 };

        [JsonProperty("储存物品表", Order = 3)]
        public List<ItemData> Items { get; set; } = new List<ItemData>();


        #region 预设参数方法
        public void Ints()
        {
            Items = new List<ItemData>
            {
                new ItemData("", 1,new int[]
                {
                    2,3,8,9,27,61,133,134,137,139,169,172,176,214,370,408,409,424,577,593,662,664,824,833,834,835,836,
                    1101,1103,1124,1125,1127,1246,2435,2701,2793,3081,3086,3271,3272,3274,3275,3276,3277,
                    3338,3339,3347,4050,5306
                }),

                new ItemData("", 20,new int[]
                {
                    1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,
                    1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,
                    1150,1168,1966,1967,1968,4668,5344
                }),

                new ItemData("", 1, new int[]
                {
                    5,11,12,13,14, 19 , 20,21,22, 23,28,29,31,38,40,41,42,43,47,48,51,56,57,59,60,62,63,66,67,68,69,70,75,
                    85,86,109,110,116,117,126,147,148,150,154,161,166,167,168,173,174,177,178,179,180,181,182,183,
                    188,189,194,195,205,206,207,209,210,225,226,227,234,235,259,261,265,267,275,276,278,279,282,283,
                    286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,
                    312,313,314,315,316,317,318,319,320,321,323,327,328,331,356,357,361,362,364,365,366,369,422,423,479,480,499,
                    500,501,502,511,512,513,515,516,520,521,522,526,527,528,529,530,538,539,540,541,542,543,544,545,546,547,548,
                    549,556,557,560,575,576,580,581,582,583,584,585,619,620,621,625,626,627,678,680,681,699,700,701,702,703,704,705,
                    706,753,771,772,773,774,780,781,782,783,784,849,850,851,852,853,880,928,929,931,937,947,965,966,985,988,999,1006,
                    1104,1105,1106,1128,1130,1133,1134,1151,1173,1174,1175,1176,1177,1179,1184,1191,1198,1225,1235,1291,1298,1302,
                    1310,1315,1328,1329,1330,1331,1332,1334,1335,1338,1339,1340,1341,1342,1344,1346,1347,1348,1349,1350,1351,1352,
                    1353,1355,1356,1357,1358,1359,1431,1432,1508,1516,1517,1518,1519,1520,1521,1528,1529,1530,1531,1532,1533,1534,
                    1535,1536,1537,1552,1570,1611,1614,1725,1727,1729,1774,1783,1785,1836,1869,1912,1913,1919,1920,1992,1994,1995,
                    1996,1997,1998,1999,2000,2001,2002,2003,2004,2006,2007,2015,2016,2017,2018,2019,2121,2122,2123,2156,2157,2161,
                    2177,2205,2209,2218,2249,2266,2267,2268,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,
                    2311,2312,2313,2314,2315,2316,2317,2318,2319,2321,2322,2323,2324,2325,2326,2327,2328,2329,2334,2335,2336,2337,
                    2338,2340,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2425,2426,2427,2436,
                    2437,2438,2942,2503,2504,2586,2590,2607,2617,2618,2625,2626,2673,2674,2675,2676,2739,2740,2756,2766,2767,2886,
                    2887,2889,2890,2891,2892,2893,2894,2895,2896,2996,2997,2999,3000,3001,3002,3003,3005,3009,3010,3011,3055,3085,
                    3091,3092,3093,3108,3111,3112,3115,3116,3117,3125,3181,3191,3192,3193,3194,3195,3196,3197,3198,3203,3204,3205,
                    3206,3207,3208,3215,3216,3217,3218,3219,3220,3221,3222,3229,3230,3231,3232,3233,3261,3318,3319,3320,3321,3322,
                    3323,3324,3325,3326,3327,3328,3329,3330,3332,3354,3355,3356,3380,3385,3386,3387,3388,3456,3457,3458,3459,3460,
                    3477,3544,3547,3548,3563,3564,3567,3568,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3613,3614,3615,3616,
                    3467,3617,3618,3726,3727,3729,3746,3817,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,4009,4010,4011,4012,
                    4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,
                    4013,4036,4037,4068,4069,4070,4071,4072,4073,4090,4271,4274,4276,4282,4283,4284,4285,4286,4287,4288,4289,4290,
                    4291,4293,4294,4295,4296,4297,4334,4335,4336,4337,4338,4339,4340,4343,4344,4345,4359,4361,4362,4363,4373,4374,
                    4375,4382,4395,4400,4401,4402,4403,4405,4406,4407,4408,4410,4411,4412,4413,4414,4418,4419,4423,4445,4446,4447,
                    4449,4457,4458,4459,4464,4477,4478,4479,4480,4482,4484,4485,4564,4608,4609,4614,4615,4616,4617,4618,4619,4620,
                    4448,4621,4622,4623,4624,4625,4714,4717,4718,4719,4720,4721,4765,4766,4782,4825,4826,4827,4831,4832,4833,4834,
                    4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4847,4849,4851,4852,4853,4854,4855,4856,4857,4870,4877,
                    4878,4879,4908,4909,4915,4957,4961,4988,5002,5003,5041,5042,5043,5070,5092,5093,5132,5137,5138,5211,5212,5213,
                    5214,5215,5326,5327,5328,5337,5338,5339,5340,5341,5342,5343,5348,5350,5377,5378,5379,5380,5383,5384,5392,5393,
                    5394,5395,5438,
                })

            };
        }
        #endregion

        #region 数据结构
        public class ItemData
        {
            [JsonProperty("物品名(不用写)", Order = 0)]
            public string Name { get; set; } = "";

            [JsonProperty("物品数量", Order = 1)]
            public int Stack { get; set; }

            [JsonProperty("物品ID", Order = 2)]
            public int[] ID { get; set; }


            public ItemData(string name = "", int stack = 0, int[] id = null!)
            {
                Name = name ?? "";
                ID = id ?? new int[] { 9 };
                Stack = Math.Max(stack, 1);
            }
        }
        #endregion

        #region 读取与创建配置文件方法
        public static readonly string FilePath = Path.Combine(TShock.SavePath, "自动存储.json");

        public void Write()
        {
            string json = JsonConvert.SerializeObject(this, Formatting.Indented);
            File.WriteAllText(FilePath, json);
        }

        public static Configuration Read()
        {
            if (!File.Exists(FilePath))
            {
                var NewConfig = new Configuration();
                NewConfig.Ints();
                new Configuration().Write();
                return NewConfig;
            }
            else
            {
                string jsonContent = File.ReadAllText(FilePath);
                return JsonConvert.DeserializeObject<Configuration>(jsonContent)!;
            }
        }
        #endregion

    }
}